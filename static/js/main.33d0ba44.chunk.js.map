{"version":3,"sources":["contexts/VideoMode.tsx","components/VideoModeSelector.tsx","components/BoxSpinner.tsx","hooks/useWindowSize.tsx","utils/getRandInt.ts","App.tsx","index.tsx"],"names":["VideoModeContext","createContext","undefined","VideoModeProvider","props","useState","currentVideoMode","setVideoMode","Provider","value","children","VideoModeSelector","useContext","setValue","onClick","NUM_TO_VIDEO_MODE","BoxSpinner","x","setX","width","height","windowSize","setWindowSize","useEffect","handleResize","window","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","targetX","setTargetX","spinning","setSpinning","connectText","setConnectText","buttonPressed","setButtonPressed","resolvedWidth","boxes","useMemo","arr","i","boxCount","push","src","videoMode","timerId","setInterval","clearInterval","useDebounce","debouncedReadyForSpin","console","log","startSpinner","useCallback","min","max","Math","floor","random","testCallback","num","socket","io","process","withCredentials","auth","on","map","box","className","style","position","background","display","abs","left","zIndex","url","playing","loop","volume","top","VIDEO_COUNTS","head","torso","leg","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.33d0ba44.chunk.js","sourcesContent":["import {\n\tcreateContext,\n\tuseState,\n\tReactNode,\n\tDispatch,\n\tSetStateAction,\n} from \"react\"\n\nexport type PureVideoMode = \"head\" | \"torso\" | \"leg\"\nexport type VideoMode = PureVideoMode | undefined\n\nexport const VideoModeContext = createContext<\n\t[VideoMode, Dispatch<SetStateAction<VideoMode>> | undefined]\n>([undefined, undefined])\n\nexport const VideoModeProvider = (props: { children: ReactNode }) => {\n\tconst [currentVideoMode, setVideoMode] = useState<VideoMode | undefined>()\n\n\treturn (\n\t\t<VideoModeContext.Provider value={[currentVideoMode, setVideoMode]}>\n\t\t\t{props.children}\n\t\t</VideoModeContext.Provider>\n\t)\n}\n","import { useContext } from \"react\"\nimport { VideoModeContext } from \"../contexts/VideoMode\"\n\nexport const VideoModeSelector = () => {\n\tconst [_, setValue] = useContext(VideoModeContext)\n\tif (!setValue) {\n\t\treturn <></>\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t<button onClick={() => setValue(\"head\")}>Head</button>\n\t\t\t<button onClick={() => setValue(\"torso\")}>Torso</button>\n\t\t\t<button onClick={() => setValue(\"leg\")}>Legs</button>\n\t\t</div>\n\t)\n}\n","import React, {\n\tuseEffect,\n\tuseMemo,\n\tuseState,\n\tReactNode,\n\tuseDebugValue,\n\tuseCallback,\n} from \"react\"\nimport { getRandInt } from \"../utils/getRandInt\"\nimport Tween from \"rc-tween-one\"\nimport { useWindowSize } from \"../hooks/useWindowSize\"\nimport ReactPlayer from \"react-player\"\nimport { PureVideoMode } from \"../contexts/VideoMode\"\nimport io from \"socket.io-client\"\nimport { useDebounce } from \"use-debounce\"\nimport { Socket } from \"dgram\"\nexport interface BoxSpinnerProps {\n\tboxCount: number\n\tvideoMode: PureVideoMode\n}\n\nconst NUM_TO_VIDEO_MODE: Record<number, PureVideoMode> = {\n\t[1]: \"head\",\n\t[2]: \"torso\",\n\t[3]: \"leg\",\n}\n\nconst COLORS = [\"#03A9F4\", \"#4CAF50\", \"#f44336\"]\nexport const BoxSpinner = (props: BoxSpinnerProps) => {\n\tconst [x, setX] = useState<number>(0)\n\tconst { width, height } = useWindowSize()\n\n\tconst [targetX, setTargetX] = useState<number>(0)\n\tconst [spinning, setSpinning] = useState<boolean>(false)\n\tconst [connectText, setConnectText] = useState<string>(\"Not connected.\")\n\tconst [buttonPressed, setButtonPressed] = useState<boolean>(false)\n\tconst resolvedWidth = width ?? 1920\n\n\tconst boxes: ReactNode[] = useMemo(() => {\n\t\tlet arr = []\n\t\tfor (let i = 0; i < props.boxCount; i++) {\n\t\t\tarr.push(\n\t\t\t\t<img src={`videos/${props.videoMode}/frames/${i + 1}.png`} />\n\t\t\t)\n\t\t}\n\n\t\treturn arr\n\t}, [])\n\n\tconst tickInterval = 200\n\tuseEffect(() => {\n\t\t//console.log(x, targetX, test)\n\t\tconst timerId = setInterval(() => {\n\t\t\tif (x < targetX && spinning) {\n\t\t\t\tsetX(x + 1)\n\t\t\t} else {\n\t\t\t\tsetSpinning(false)\n\t\t\t}\n\t\t}, tickInterval)\n\n\t\treturn () => clearInterval(timerId)\n\t})\n\n\tconst [debouncedReadyForSpin] = useDebounce(buttonPressed, 500)\n\tuseEffect(() => {\n\t\tconsole.log(debouncedReadyForSpin)\n\t\tif (debouncedReadyForSpin) {\n\t\t\tsetButtonPressed(false)\n\t\t\tstartSpinner()\n\t\t}\n\t}, [debouncedReadyForSpin])\n\n\tconst startSpinner = useCallback(() => {\n\t\tsetTargetX(targetX + getRandInt(5, Math.min(12, props.boxCount)))\n\t\tsetSpinning(true)\n\t}, [props.videoMode, targetX])\n\n\tconst test = useMemo(() => targetX, [targetX])\n\n\tconst testCallback = (num: number) => {\n\t\tif (NUM_TO_VIDEO_MODE[num] !== props.videoMode) {\n\t\t\treturn\n\t\t}\n\t\tsetButtonPressed(true)\n\t}\n\n\tuseEffect(() => {\n\t\tconst socket = io(`ws://${process.env.REACT_APP_WS}:5000`, {\n\t\t\twithCredentials: false,\n\t\t\tauth: undefined,\n\t\t})\n\t\tsocket.on(\"connect\", () => setConnectText(\"Connection Succeeded\"))\n\t\tsocket.on(\"connect_failed\", () => {\n\t\t\tsetConnectText(\"Connection failed\")\n\t\t})\n\t\tsocket.on(\"input_event\", testCallback)\n\t}, [])\n\n\treturn (\n\t\t<div>\n\t\t\t<p>{connectText}</p>\n\t\t\t<div>\n\t\t\t\t{boxes.map((box, i) => (\n\t\t\t\t\t<div\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\tclassName=\"box\"\n\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\tposition: \"fixed\",\n\t\t\t\t\t\t\tbackground: \"white\",\n\t\t\t\t\t\t\tdisplay:\n\t\t\t\t\t\t\t\tspinning &&\n\t\t\t\t\t\t\t\tMath.abs((x % props.boxCount) - i) <= 2\n\t\t\t\t\t\t\t\t\t? \"block\"\n\t\t\t\t\t\t\t\t\t: \"none\",\n\t\t\t\t\t\t\tleft:\n\t\t\t\t\t\t\t\tx % props.boxCount === i\n\t\t\t\t\t\t\t\t\t? 0\n\t\t\t\t\t\t\t\t\t: x % props.boxCount === i + 1\n\t\t\t\t\t\t\t\t\t? -resolvedWidth\n\t\t\t\t\t\t\t\t\t: resolvedWidth,\n\n\t\t\t\t\t\t\tzIndex: props.boxCount - i + 100,\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{box}\n\t\t\t\t\t</div>\n\t\t\t\t))}\n\t\t\t\t<ReactPlayer\n\t\t\t\t\turl={`videos/${props.videoMode}/${\n\t\t\t\t\t\t(targetX % props.boxCount) + 1\n\t\t\t\t\t}.mp4`}\n\t\t\t\t\tplaying={true}\n\t\t\t\t\twidth=\"100vw\"\n\t\t\t\t\theight=\"100vh\"\n\t\t\t\t\tloop\n\t\t\t\t\tstyle={{\n\t\t\t\t\t\tzIndex: 1,\n\t\t\t\t\t}}\n\t\t\t\t\tvolume={0}\n\t\t\t\t/>\n\t\t\t</div>\n\n\t\t\t<button\n\t\t\t\tonClick={() => {\n\t\t\t\t\tstartSpinner()\n\t\t\t\t}}\n\t\t\t\tstyle={{ position: \"fixed\", top: 500 }}\n\t\t\t>\n\t\t\t\tSpin\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n","import { useState, useEffect } from \"react\"\n\n// Hook\ninterface Size {\n\twidth: number | undefined\n\theight: number | undefined\n}\n\nexport const useWindowSize = (): Size => {\n\t// Initialize state with undefined width/height so server and client renders match\n\t// Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\n\tconst [windowSize, setWindowSize] = useState<Size>({\n\t\twidth: undefined,\n\t\theight: undefined,\n\t})\n\n\tuseEffect(() => {\n\t\t// Handler to call on window resize\n\t\tfunction handleResize() {\n\t\t\t// Set window width/height to state\n\t\t\tsetWindowSize({\n\t\t\t\twidth: window.innerWidth,\n\t\t\t\theight: window.innerHeight,\n\t\t\t})\n\t\t}\n\n\t\t// Add event listener\n\t\twindow.addEventListener(\"resize\", handleResize)\n\n\t\t// Call handler right away so state gets updated with initial window size\n\t\thandleResize()\n\n\t\t// Remove event listener on cleanup\n\t\treturn () => window.removeEventListener(\"resize\", handleResize)\n\t}, []) // Empty array ensures that effect is only run on mount\n\n\treturn windowSize\n}\n","export const getRandInt = (min: number, max: number) =>\n\tMath.floor(Math.random() * (max - min) + min)\n","import \"./App.scss\"\nimport { useContext } from \"react\"\nimport { PureVideoMode, VideoModeContext } from \"./contexts/VideoMode\"\nimport { VideoModeSelector } from \"./components/VideoModeSelector\"\nimport { VideoController } from \"./components/VideoController\"\nimport { BoxSpinner } from \"./components/BoxSpinner\"\n\nconst VIDEO_COUNTS: Record<PureVideoMode, number> = {\n\thead: 24,\n\ttorso: 41,\n\tleg: 37,\n}\n\nconst App = () => {\n\t//\tShow the video mode selector if there is not one selected\n\tconst [videoMode] = useContext(VideoModeContext)\n\treturn videoMode === undefined ? (\n\t\t<VideoModeSelector />\n\t) : (\n\t\t<BoxSpinner boxCount={VIDEO_COUNTS[videoMode]} videoMode={videoMode} />\n\t)\n}\n\nexport default App\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport \"./index.css\"\nimport App from \"./App\"\nimport { VideoModeProvider } from \"./contexts/VideoMode\"\n\nReactDOM.render(\n\t<VideoModeProvider>\n\t\t<App />\n\t</VideoModeProvider>,\n\n\tdocument.getElementById(\"root\")\n)\n"],"sourceRoot":""}